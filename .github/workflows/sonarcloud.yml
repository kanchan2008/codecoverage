name: SonarCloud
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]      

jobs:
  build:
    name: Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
          dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.1.4
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"kanchan2008_codecoverage" /o:"kanchan2008" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="D:\a\codecoverage\codecoverage\SampleApp.Tests\TestResults\*\coverage.cobertura.xml" /d:sonar.coverageReportPaths=".\sonarqubecoverage\SonarQube.xml"
           dotnet restore SampleApp/SampleApp.csproj
           dotnet build --configuration Release SampleApp/SampleApp.csproj
           dotnet test --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=opencover SampleApp.Tests/SampleApp.Tests.csproj --collect:"XPlat Code Coverage" --logger trx /p:CoverletOutput='./coverage.opencover.xml'
           reportgenerator "-reports:D:\a\codecoverage\codecoverage\SampleApp.Tests\TestResults\*\coverage.cobertura.xml" "-targetdir:sonarqubecoverage" "-reporttypes:SonarQube"
           copy SampleApp.Tests/TestResults/*/coverage.opencover.xml ./coverage.opencover.xml
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
